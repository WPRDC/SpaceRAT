id: parcel
name: Parcel
id_field: parcel_id
table: parcel_index
subgeographies: # leaf, besides points
query: >
  SELECT sub.parcel_id,
         sub.address                                  AS "name",
         sub.block_lot,
         sub.class,
         sub.housenum,
         sub.fraction,
         sub.unit,
         sub.street,
         sub.city,
         sub.state,
         sub.zip,
         sub.address,
         sub.owner_address,
         sub.year_built,
         sub.owner_occupied,
         sub.is_vacant,
         sub.has_sold,
         sub.geom,
         sub.centroid,
         (sub.parcel_id || ' '::text) || sub.address  AS _full_text
  FROM (SELECT assessment."PARID"                                  AS parcel_id,
               boundary."MAPBLOCKLO"                               AS block_lot,
               assessment."CLASSDESC"                              AS class,
            
               assessment."FAIRMARKETBUILDING" < 1000              AS is_vacant,
  
               assessment."SALEDATE" IS NOT NULL                   AS has_sold, 
  
               assessment."PROPERTYHOUSENUM"                       AS housenum,
               assessment."PROPERTYFRACTION"                       AS fraction,
               assessment."PROPERTYUNIT"                           AS unit,
               assessment."PROPERTYADDRESS"                        AS street,
               assessment."PROPERTYCITY"                           AS city,
               assessment."PROPERTYSTATE"                          AS state,
               assessment."PROPERTYZIP"                            AS zip,

               trim(regexp_replace(
                       assessment."CHANGENOTICEADDRESS1" ||
                       assessment."CHANGENOTICEADDRESS2" ||
                       assessment."CHANGENOTICEADDRESS3" ||
                       assessment."CHANGENOTICEADDRESS4",
                       '\s+', ' ', 'g')
               )                                                   as owner_address,
              
                assessment."YEARBLT"                                 as year_built,
              
               trim(regexp_replace(
                       assessment."PROPERTYHOUSENUM" || ' ' ||
                       assessment."PROPERTYADDRESS" || ' ' ||
                       assessment."PROPERTYCITY" || ' ' ||
                       assessment."PROPERTYSTATE" || ' ' ||
                       assessment."PROPERTYZIP",
                       '\s+', ' ', 'g')
               )                                                   AS address,

               (assessment."HOMESTEADFLAG" IS NOT NULL
                   OR assessment."CHANGENOTICEADDRESS1" ILIKE assessment."PROPERTYHOUSENUM" || '%') AS owner_occupied,
  
               boundary._geom                                      AS geom,
  
               st_setsrid(st_centroid(boundary._geom), 4326)       AS centroid
        FROM "65855e14-549e-4992-b5be-d629afc676fa" assessment
                 JOIN "3f50d47a-ab54-4da2-9f03-8519006e9fc9" boundary
                      ON assessment."PARID" = boundary."PIN") sub;
variants:
  residential:
    name: Residential
    description: Parcels designated "residential" use class
    where_clause: >
      "class" LIKE 'RESIDENTIAL'
  commercial:
    name: Commercial
    description: Parcels designated "commercial" use class
    where_clause: >
      "class" LIKE 'COMMERCIAL'
  industrial:
    name: Industrial
    description: Parcels designated "industrial" use class
    where_clause: >
      "class" LIKE 'INDUSTRIAL'
  owner_occupied:
    name: Owner-occupied
    description: Parcels where the owner is the primary resident.
    where_clause: >
      "owner_occupied"
  has_sold:
    name: Has sale recorded
    description: Parcels with a recorded sale in the data
    where_clause: >
      has_sold
  has_building:
    name: Has a building
    description: Parcels with buildings on them
    where_clause: >
      NOT is_vacant
  vacant:
    name: Vacant lot
    description: Parcels that have no buildings
    where_clause: >
      is_vacant
filters:
  by_owner: >
    "owner_address" ILIKE %s
trigram_indexes:
  - _full_text
  - address
  - owner_address
  - lower(address)
  - lower(owner_address)
extra_fields:
  - address
  - owner_address